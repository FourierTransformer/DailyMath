worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  # Buffers yo
  client_body_buffer_size 10K;
  client_header_buffer_size 1k;
  client_max_body_size 1m;
  large_client_header_buffers 2 1k;

  # Timeouts
  client_body_timeout 12;
  client_header_timeout 12;
  keepalive_timeout 15;
  send_timeout 10;

  # Gzip compression
  gzip on;
  gzip_comp_level    2;
  gzip_min_length    1000;
  gzip_proxied       expired no-cache no-store private auth;
  gzip_vary          on;

  # Compress the following MIME-types:
  gzip_types
    text/css application/xml
    application/json application/x-javascript
    font/ttf font/opentype application/vnd.ms-fontobject image/svg+xml;

  # Nginx log
  access_log off;

  # enable cache space
  lua_shared_dict page_cache 15m;

  ${{FORCE_SSL}}

  server {
    listen ${{PORT}};
    server_name ${{SERVER_NAME}};
    ${{SSL_INFO}}

    lua_code_cache ${{CODE_CACHE}};

    location / {
      default_type text/html;
      set $_url '';
      content_by_lua '
        require("lapis").serve("app")
      ';
    }

    location /static/ {
      alias static/;
      expires 365d;
    }

    location /favicon.ico {
      alias static/favicon.ico;
      expires 365d;
    }

    location /robots.txt {
      alias static/robots.txt;
      expires 365d;
    }

    # block to allow http requests
    location /proxy {
        internal;
        rewrite_by_lua "
          local req = ngx.req

          for k,v in pairs(req.get_headers()) do
            if k ~= 'content-length' then
              req.clear_header(k)
            end
          end

          if ngx.ctx.headers then
            for k,v in pairs(ngx.ctx.headers) do
              req.set_header(k, v)
            end
          end
        ";

        resolver 8.8.8.8;
        proxy_http_version 1.1;
        proxy_pass $_url;
    }

  }
}
