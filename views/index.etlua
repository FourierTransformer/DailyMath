<div id = "app"></div>
<!-- the api returns the answer with the question to make my life a lot easier. Sure, you can find the answer here, but then what's the point in doing daily math? -->
<script>
	var dailyMath = {};
		dailyMath.user = function() {
			this.answer = m.prop('');
			this.level = 0;
			this.showHint = false;
		};

		dailyMath.renderKatex = function(problem) {
			var start_pos = problem.indexOf('$') + 1;
			var end_pos = problem.indexOf('$',start_pos);
			var text_to_get = problem.substring(start_pos,end_pos)
			return problem.substring(0, start_pos-1) + katex.renderToString(text_to_get) + problem.substring(end_pos+1)
		};

		dailyMath.levels = [
			{title: "High School", level: 0},
			{title: "College", level: 1}
		];

		dailyMath.loadError = null;
		dailyMath.load = function() {
			var today = <%- "\"" .. definedDate .. "\"" %>;
			if (!today) {
				var todayDate = new Date();
				var day = todayDate.getDate();
				var month = todayDate.getMonth()+1;
				var year = todayDate.getFullYear();
				today = year + '-' + month + '-' + day;
			}
			return m.request({method: "GET", url: "/api/v1/problems/" + today,
			// return m.request({method: "GET", url: "/api/v1/problems/today",
				// the response here is correct, but I'm not entirely certain what happens on the return
				unwrapError: function(response) {
					console.log(response.errors);
					dailyMath.loadError = response.errors;
			        return response.errors;
			    }
		})}

		dailyMath.controller = function() {
			this.user = new dailyMath.user();
			this.problem = dailyMath.load();
			this.mathProblem = null;
			this.toggleHint = function() {
				this.user.showHint == true ? this.user.showHint = false : this.user.showHint = true;
			};
			this.hintButtonDisplay = function() {
				if (this.problem().problems[this.user.level].hint) {
					return "block";
				} else {
					return "none";
				}
			}
			this.submitAnswer = function() {
				console.log(this.user.answer());
				console.log(this.problem().problems[this.user.level].answer);
				if (this.user.answer() == this.problem().problems[this.user.level].solution.answer) {
					alert("That is correct!");
				} else {
					alert("Sorry, " + this.user.answer() + " is not correct. Try Again!")
				}
			}
			this.showLevels = function() {
				if (this.problem().problems.length == 1) {
					return "none";
				} else {
					return "block";
				}
			}
			this.changeLevel = function(newLevel) {
				this.user.level = newLevel;
				this.user.showHint = false;
			}

			this.reloadMath = function(el, isInit) {
				while (el.children.length > 0) el.removeChild(el.children[0]);
  				if (isInit) MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
			}

		}

		dailyMath.view = function(ctrl) {
			if (dailyMath.loadError) {
				// I unfortunately couldn't get the error message to show from the load function
				// so I set a variable instead. I might be able to make the load() function smarter
				// to handle this. But right now, I am good.
				return m("p", dailyMath.loadError)
			} else {
			return [

				// THE CONTROLS AND STUFF

				m(".controls",
				m("h2", ctrl.problem().problems[ctrl.user.level].category),
				m("ul", {style: {display: ctrl.showLevels()}},
				dailyMath.levels.map(function(selectedLevel) {
		            return m("li",
		            		m(selectedLevel.level == ctrl.user.level ? "span.current" : "button", {onclick: ctrl.changeLevel.bind(ctrl, selectedLevel.level)}, selectedLevel.title)
		            		);
		        }))
		        ),
				//
				m("p#date", ctrl.problem().problems[ctrl.user.level].date),

				// DISPLAYING THE PROBLEM
		        m("#problem",
				m("p", m.trust(dailyMath.renderKatex(ctrl.problem().problems[ctrl.user.level].problem)))),
				// THE ANSWER FORM
				m("form",
					m("label", {for: "answer"}, "Answer:"),
					m("input[type=text]", {id: "answer", placeholder: "Enter your answer here", autocomplete: "off", onchange: m.withAttr("value", ctrl.user.answer)}),
					m("input", { type: "submit", value:"Submit", onclick: ctrl.submitAnswer.bind(ctrl)})
					// m("label", {class: "button", for: "modal_1"}, "Submit"),
				),
				//HINT
				m("button", {onclick: ctrl.toggleHint.bind(ctrl), style: {display: ctrl.hintButtonDisplay()}}, ctrl.user.showHint ? "Hide Hint" : "Show Hint"),
				m("p", ctrl.user.showHint ? ctrl.problem().problems[ctrl.user.level].hint : ""),
			]; }
		}

	m.module(document.getElementById("app"), dailyMath);
</script>

